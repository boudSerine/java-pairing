package pairing.cipher.risk.tsukuba.ac.jp;

import java.math.BigInteger;

/**
 * @author ’£ ˆê–}
 * 
 */
public class ReadPoint {
	/**
	 * @return P(x,y) for pairing
	 */
	public static BigInteger[] getPoint() {
		// final String xtmp = Messages.getString("ReadPoint.0"); //$NON-NLS-1$
		// Hyperelliptic point.
		// final String
		// xtmp="000001101001100011110010011000110101001010111100000100000011101111110110110110011101000111111011010111";
		// elliptic point.
		// final String
		// xtmp="01001001010010000000111111101001110011100101110111111010011110101100001011010111000100011011100111111100101111001000111011111100111001010110010010110100101100010100001100010010000011100110110101110010000001100001100011100011011110011101101";
		// final String
		// xtmp="1001010010001011000101100110011111000011011101001111001110011011011111101000011111011110100101010111110100001100101011000111001011101101110011100101100000001111111000010001110000000000011011011000001011000110110101011000000011000110010001111";
		// final String
		// xtmp="00101101101100011010100110111100001000101000011010111100010100100001001000111011011000111110000110110100101110110011110000001010010110010111010101111000010101101010000110010101001111011111110001101100010011000110111110100110101100001001111";

		BigInteger x = BigInteger.ZERO;
		// final String ytmp = Messages.getString("ReadPoint.1"); //$NON-NLS-1$
		// Hyperellilptic point.
		// final String
		// ytmp="010001111011000001101010100111011101100111000101010100010100101001011010110000010111011101111010011001";
		// elliptic point.
		// final String
		// ytmp="0001000101011011100111010100101001000010101011100001011110011000001111000101001011100011101111100001011101000101110110111011010110101011100101001010100101110111011100001010101011111011101100001111010111110111000000100001101111000001110010101";
		// final String
		// ytmp="11000101100000000011101111100001010001011100101110000000100101110011010000101000010001010110111010100100110001110100100110011111010000001000101100111101110001000011001000001101110001110001010101011000111110101100111010110000100000111000111";
		// final String
		// ytmp="01101001010001100111010100111111111010000100010000110010001101100010011010100110100000011011110101101011010101011111101100000011110010001010111101011011001011101010000011110011101010111001010100001111110110111000011000101001110101110000011";

		// 79bit
		final String xtmp = "0100100101001000000011111110100111001110010111011111101001111010110000101101011";
		final String ytmp = "0001100100001101000111001001011000010011111010110111111001010011000001111011011";
		// final String
		// xtmp="0100000110110100100001011100000101110111111000111011111001110100110111001101001";
		// final String
		// ytmp="0111011000010110000011011001101110100001101111001000110110000001001111100011011";

		// 103bit
		// final String
		// xtmp="110110100010010101000100010010001101100000000110111111000001101010000101001000010101011011000001100101";
		// final String
		// ytmp="0110000010001000111110011011010001011110101001011101000110100000110101111100000011000000110100110011101";

		BigInteger y = BigInteger.ONE;
		int k;
		for (int i = 0; i < 241; i++) {
			k = xtmp.indexOf(Messages.getString("ReadPoint.2"), i); //$NON-NLS-1$
			if (k >= 0) {
				x = x.setBit(k);
			} else {
				break;
			}
			i = xtmp.indexOf(Messages.getString("ReadPoint.3"), i); //$NON-NLS-1$
		}
		for (int i = 0; i < 241; i++) {
			k = ytmp.indexOf(Messages.getString("ReadPoint.4"), i); //$NON-NLS-1$
			if (k >= 0) {
				y = y.setBit(k);
			} else {
				break;
			}
			i = ytmp.indexOf(Messages.getString("ReadPoint.5"), i); //$NON-NLS-1$
		}
		final BigInteger[] p = new BigInteger[2];
		p[0] = x;
		p[1] = y;
		return p;
	}
}